!function(e,r){"function"==typeof define&&define.amd?define(["angular-schema-form"],r):"object"==typeof exports?module.exports=r(require("angular-schema-form")):e.angularSchemaFormUIGrid=r(e.schemaForm)}(this,function(e){return angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/ui-grid/ui-grid.html",'<div gm-ui-grid="form" class="form-group schema-form-{{form.type}} {{form.htmlClass}}" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }">\r\n    <div class="row">\r\n        <div class="col-md-2">\r\n            <label class="control-label {{form.labelHtmlClass}}" ng-class="{\'sr-only\': !form.title}" ng-if="form.title !== form.key[0]" for="{{form.key.slice(-1)[0]}}">\r\n                {{form.title}}\r\n                <i ng-hide="form.readonly" ng-hide="!vm.gridOptions.data.length" class="fa fa-undo clickable" aria-hidden="true" ng-click="vm.reset()"></i>\r\n            </label>\r\n            <span ng-if="form.fieldAddonLeft" class="input-group-addon" ng-bind-html="form.fieldAddonLeft"></span>\r\n        </div>\r\n        <div class="col-md-10">\r\n            <div class="col-md-7 row">\r\n            </div>\r\n            <div class="tooltip-mark col-sm-1">\r\n                           <span ng-if="form.tooltip.content != null && form.tooltip.content != \'\'" class="glyphicon glyphicon-question-sign clickable" ng-attr-tooltip-trigger="outsideClick" ng-attr-tooltip-placement="{{form.tooltip.position}}" ng-attr-uib-tooltip="{{form.tooltip.content}}"></span>\r\n            </div>\r\n            <div class="help-block col-sm-3" style="height: 43px" sf-message="form.description"></div>\r\n            <div class="col-sm-1">\r\n                           <span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }" aria-hidden="true"></span>\r\n                <span ng-if="hasError() || hasSuccess()" id="{{form.key.slice(-1)[0] + \'Status\'}}" class="sr-only">\r\n                                   {{ hasSuccess() ? \'(success)\' : \'(error)\' }}\r\n                               </span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class="row">\r\n        <div class="col-md-12 file-upload">\r\n            <div id="grid1" ui-grid="vm.gridOptions" class="grid" ng-if="vm.gridOptions.data.length">\r\n            </div>\r\n            <div grid-data ng-show="!vm.gridOptions.data.length" ng-model="$$value$$" schema-validate="form" sf-changed="form" name="{{form.key.slice(-1)[0]}}" class="well well-sm bg-white mb">\r\n                <div ng-include="\'upload.html\'"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class="row">\r\n        <div class="col-md-12 row">\r\n            <div class="row well well-sm bg-white mb">\r\n                <div class="col-md-4">\r\n                    <a class="btn btn-block" href="https://s3.amazonaws.com/diap.prod.us-east-1.datavault-portal-resource/Custom%20Feed%20Template.xlsx" target="_blank">Download Template</a>\r\n                </div>\r\n                <div class="col-md-4">\r\n                    <a class="btn btn-block" ng-click="showTemplateInstructions()">View Template Instructions</a>\r\n                </div>\r\n                <div class="col-md-4">\r\n                    <button ng-disabled="form.readonly" class="btn btn-block" type="button" ng-click="vm.reset()">\r\n                        Reset\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<script type="text/ng-template" id="upload.html">\r\n    <div fileread ngf-drop="selectFile(gridFile)" ngf-select="selectFile(gridFile)" opts="vm.gridOptions" type="file"\r\n         ngf-multiple="false" name="gridFile"\r\n         ng-attr-ngf-pattern="{{ form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}"\r\n         ng-model="gridFile"\r\n         ng-attr-ngf-max-size="{{ form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"\r\n         ng-required="form.required"\r\n         accept="{{ form.schema.pattern && form.schema.pattern.mimeType }}" ng-model-options="form.ngModelOptions"\r\n         ngf-drag-over-class="dragover"\r\n         class="drop-box dragAndDropDescription" ng-protection-key="form.protectionKey">\r\n        <p class="text-center">Drag file or click to upload</p>\r\n    </div>\r\n    <div ngf-no-file-drop>{{ \'modules.upload.dndNotSupported\' }}</div>\r\n    <button fileread ngf-select="selectFile(gridFile)" type="file" ngf-multiple="false" opts="vm.gridOptions"\r\n            name="gridFile"\r\n            ng-attr-ngf-pattern="{{ form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}"\r\n            ng-model="gridFile"\r\n            ng-attr-ngf-max-size="{{ form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"\r\n            ng-required="form.required" accept="{{ form.schema.pattern && form.schema.pattern.mimeType}}"\r\n            ng-model-options="form.ngModelOptions"\r\n            id="fileInputButton" class="btn btn-primary btn-block {{ form.htmlClass }} mt-lg mb"\r\n            ng-protection-key="form.protectionKey">\r\n        <fa fw="fw" name="upload" class="mr-sm"></fa>\r\n        Add\r\n    </button>\r\n</script>')}]),function(e,r){"function"==typeof define&&define.amd?define(["angular-schema-form"],r):"object"==typeof exports?module.exports=r(require("angular-schema-form")):e.angularSchemaFormUiGrid=r(e.schemaForm)}(this,function(e){angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/ui-grid/ui-grid.html",'<div gm-ui-grid="form" class="form-group schema-form-{{form.type}} {{form.htmlClass}}"      ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }">   <div class="row">       <div class="col-md-2">           <label class="control-label {{form.labelHtmlClass}}" ng-class="{\'sr-only\': !form.title}"                  ng-if="form.title !== form.key[0]" for="{{form.key.slice(-1)[0]}}">               {{form.title}}               <i ng-hide="form.readonly" ng-hide="!vm.gridOptions.data.length" class="fa fa-undo clickable" aria-hidden="true" ng-click="vm.reset()"></i>           </label>           <span ng-if="form.fieldAddonLeft" class="input-group-addon" ng-bind-html="form.fieldAddonLeft"></span>       </div>       <div class="col-md-10">           <div class="col-md-7 row">           </div>           <div class="tooltip-mark col-sm-1">               <span ng-if="form.tooltip.content != null && form.tooltip.content != \'\'" class="glyphicon glyphicon-question-sign clickable"                      ng-attr-tooltip-trigger="outsideClick" ng-attr-tooltip-placement="{{form.tooltip.position}}" ng-attr-uib-tooltip="{{form.tooltip.content}}"></span>           </div>           <div class="help-block col-sm-3" style="height: 43px;" sf-message="form.description"></div>           <div class="col-sm-1">               <span ng-if="form.feedback !== false" class="form-control-feedback"                     ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }" aria-hidden="true"></span>               <span ng-if="hasError() || hasSuccess()" id="{{form.key.slice(-1)[0] + \'Status\'}}" class="sr-only">                   {{ hasSuccess() ? \'(success)\' : \'(error)\' }}               </span>           </div>       </div>   </div>   <div class="row">       <div class="col-md-12 file-upload">           <div id="grid1" ui-grid="vm.gridOptions" class="grid" ng-if="vm.gridOptions.data.length">           </div>           <div grid-data ng-show="!vm.gridOptions.data.length" ng-model="$$value$$" schema-validate="form" sf-changed="form"                name="{{form.key.slice(-1)[0]}}" class="well well-sm bg-white mb">               <div ng-include="\'upload.html\'"></div>           </div>       </div>   </div>   <div class="row">       <div class="col-md-12 row">           <div class="row well well-sm bg-white mb">               <div class="col-md-4">                   <a class="btn btn-block" href="https://s3.amazonaws.com/diap.prod.us-east-1.datavault-portal-resource/Custom%20Feed%20Template.xlsx" target="_blank">Download Template</a>               </div>               <div class="col-md-4">                   <a class="btn btn-block" ng-click="showTemplateInstructions()">View Template Instructions</a>               </div>               <div class="col-md-4">                   <button ng-disabled="form.readonly" class="btn btn-block" type="button" ng-click="vm.reset()">Reset</button>               </div>           </div>       </div>   </div></div><script type="text/ng-template" id="upload.html">   <div fileread ngf-drop="selectFile(gridFile)" ngf-select="selectFile(gridFile)" opts="vm.gridOptions" type="file" ngf-multiple="false" name="gridFile"        ng-attr-ngf-pattern="{{ form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}" ng-model="gridFile"        ng-attr-ngf-max-size="{{ form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}" ng-required="form.required"        accept="{{ form.schema.pattern && form.schema.pattern.mimeType }}" ng-model-options="form.ngModelOptions" ngf-drag-over-class="dragover"        class="drop-box dragAndDropDescription" ng-protection-key="form.protectionKey">       <p class="text-center">Drag file or click to upload</p>   </div>   <div ngf-no-file-drop>{{ \'modules.upload.dndNotSupported\' }}</div>   <button fileread ngf-select="selectFile(gridFile)" type="file" ngf-multiple="false" opts="vm.gridOptions" name="gridFile"           ng-attr-ngf-pattern="{{ form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}" ng-model="gridFile"           ng-attr-ngf-max-size="{{ form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"           ng-required="form.required" accept="{{ form.schema.pattern && form.schema.pattern.mimeType}}" ng-model-options="form.ngModelOptions"           id="fileInputButton" class="btn btn-primary btn-block {{ form.htmlClass }} mt-lg mb" ng-protection-key="form.protectionKey">       <fa fw="fw" name="upload" class="mr-sm"></fa>       Add   </button></script>')}]),angular.module("schemaForm").controller("gridController",["$scope","$modal","gridService",function(e,r,t){e.$parent.vm=this,e.$parent.vm.gridOptions={enableColumnMenus:!1,enableColumnResizing:!0,data:[],columnDefs:[],minWidth:300},e.$watch(function(){return t.gridData},function(r){e.$parent.vm.gridOptions.data=r?r:[]}),e.$parent.vm.reset=function(){e.$parent.vm.gridOptions.data=[],e.$parent.vm.gridOptions.columnDefs=[],e.$parent.vm.gridOptions.enableColumnMenus=!1,e.$parent.vm.gridOptions.enableColumnResizing=!0,e.$parent.vm.gridOptions.minWidth=300,e.ngModel=void 0},e.$parent.showTemplateInstructions=function(){r({scope:e,templateUrl:"templates/modals/template-instructions.tpl.html",show:!0,animation:"am-fade-and-scale",placement:"center",title:"Custom Feed Schema Template Instructions",html:!0})}}]),angular.module("schemaForm").directive("gmUiGrid",[function(){return{restrict:"A",controller:"gridController"}}]),angular.module("schemaForm").factory("gridService",[function(){function e(r,t){if(!t)return null;var i=t.split(".");return r.hasOwnProperty(i[0])?r:r.$parent?e(r.$parent,t):null}function r(r,t){var i=e(r,t);return i?i.$eval(t):null}var t={},i={},a=null,n=null,o=null;return t.validations=i,t.gridData=a,t.protectionKey=n,t.gridKey=o,t.searchScopesWithProperty=e,t.evalInScope=r,t}]),angular.module("schemaForm").directive("gridData",["gridService",function(e){return{restrict:"A",scope:{ngModel:"="},require:"^ngModel",link:function(r,t,i,a){e.gridData=r.ngModel,r.$watch(function(){return e.gridData},function(e){a.$setViewValue(e?e:void 0),a.$commitViewValue(),e&&r.validate()}),r.validate=function(){if(a){var t=r.$parent.$eval(i.schemaValidate);if(a.$setDirty){a.$setDirty(),a.$setViewValue(a.$viewValue),a.$commitViewValue(),t.required&&!a.$modelValue.length&&a.$setValidity("tv4-302",!1);for(var n in e.validations)a.$setValidity(n,e.validations[n]);a.$setValidity("tv4-500",e.protectionKey&&e.gridKey&&e.gridKey===e.protectionKey)}else a.$setViewValue(a.$viewValue)}},r.$on("schemaFormValidate",r.validate)}}}]),angular.module("schemaForm").directive("fileread",["gridService","$http","ngAuthSettings",function(e,r,t){return{restrict:"A",scope:{opts:"=",ngModel:"=",ngProtectionKey:"="},require:"^ngModel",link:function(i,a,n,o){var s=e.searchScopesWithProperty(i,"form.columnDefinitions").form.columnDefinitions;if(e.protectionKey=e.evalInScope(i,n.ngProtectionKey)?"51e78d6835f0eafd0d3dd768eb3d2fcc36e8d0b6edc9e060436a6adf664429d4":null,s){i.opts.columnDefs=[];for(var l in s){var d=s[l],m=d.name,c=d.displayName;i.opts.columnDefs.push({field:m,name:m,displayName:c,width:10*c.length,headerCellClass:"grid-align"})}if(i.ngModel){var f=[];for(var p in i.ngModel){var u=i.ngModel[p],g={};for(var l in s){var d=s[l],m=d.name;u.hasOwnProperty(m)&&(g[m]=d.conversionFromObject(d.type,u[m]))}f.push(g)}i.opts.data=f}}i.validate=function(){o&&o.$setDirty&&o.$setValidity("required",!0)},i.$on("schemaFormValidate",i.validate),i.$parent.selectFile=function(n){if(n){var l=new FileReader;l.onload=function(o){i.$apply(function(){for(var o in s){var l=s[o];if(l.hasOwnProperty("validation"))for(var d in l.validation)e.validations[d]=!0}var m=[],c=[],f=new FormData;f.append("file",n),r.post(t.resourceApiServiceBaseUri+"excel/extract_template",f,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(function(r){for(var t="a",n=r,o=t.charCodeAt(),l=o+s.length,d=2;n.hasOwnProperty(t+d);d++){for(var f={},p={},u=o;u<l;u++){var g=n.hasOwnProperty(String.fromCharCode(u)+d)?n[String.fromCharCode(u)+d].v:null,v=u-o,h=s[v];f[h.name]=g,p[h.name]=h.conversionToObject(h.type,g),null==p[h.name]&&h.hasOwnProperty("defaultValue")&&(p[h.name]=h.defaultValue)}for(var y in s){var h=s[y];if(h.hasOwnProperty("validation"))for(var b in h.validation)e.validations[b]=e.validations[b]&&h.validation[b](p)}m.push(f),c.push(p)}i.opts.columnDefs=[];for(var y in s){var h=s[y],b=h.name,k=h.displayName;i.opts.columnDefs.push({field:b,displayName:k,width:10*k.length,headerCellClass:"grid-align"})}i.opts.data=m,e.gridData=c,workbook.Sheets["Version Check"]&&workbook.Sheets["Version Check"].B1.v&&(e.gridKey=workbook.Sheets["Version Check"].B1.v),a.val(null)}).error(function(e,r){})})},n.size>2e7?i.$apply(function(){o.$setViewValue(void 0),o.$commitViewValue(),o.$setValidity("size",!1),a.val(null)}):(o.$setValidity("size",!0),l.readAsBinaryString(n))}}}}}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,r,t){var i=function(r,i,a){if("array"===i.type&&"grid"===i.format){var n=e.stdFormObj(r,i,a);return n.type="grid",n.key=a.path,n.columnDefinitions=i.columnDefinitions,a.lookup[t.stringify(a.path)]=n,n}};e.defaults.array.unshift(i),r.defineAddOn("bootstrapDecorator","grid","directives/decorators/ui-grid/ui-grid.html")}])}),angularSchemaFormUIGrid});